export const NEXT_CONFIG_MJS = `import createMDX from '@next/mdx'
import rehypePrettyCode from 'rehype-pretty-code'
import rehypeSlug from 'rehype-slug'
import remarkGfm from 'remark-gfm'
import { visit } from 'unist-util-visit'

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'mdx', 'ts', 'tsx'],
}

const withMDX = createMDX({
  options: {
    remarkPlugins: [remarkGfm],
    rehypePlugins: [
      () => (tree) => {
        visit(tree, (node) => {
          if (node?.type === 'element' && node?.tagName === 'pre') {
            const [codeElement] = node.children
            if (codeElement.tagName !== 'code') return
            node.raw = codeElement.children[0]?.value
          }
        })
      },
      [
        rehypePrettyCode,
        {
          keepBackground: false,
        },
      ],
      rehypeSlug,
      () => (tree) => {
        visit(tree, (node) => {
          if (node?.type === 'element' && node?.tagName === 'figure') {
            if ((!'data-rehype-pretty-code-figure') in node.properties) {
              return
            }
            const preElement = node.children.at(-1)
            if (preElement.tagName !== 'pre') return
            preElement.properties = {
              ...preElement.properties,
              raw: node.raw,
            }
          }
        })
      },
    ],
  },
})

export default withMDX(nextConfig)
`

export const MDX_COMPONENT_TSX = `import type { MDXComponents } from 'mdx/types'

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,
  }
}
`

export const RDOCS_SIDEBAR_YAML = `- title: Getting Started
- title: Introduction
  href: /docs
- title: Installation
  href: /docs/installation
`

export const DEMO_MDX = `Automatically generated by [Readrave](https://readrave.com)
`

export const DEMO_LAYOUT_TSX = `import { ReadraveMobilebar } from '@/components/readrave/mobilebar'
import { ReadraveSidebar } from '@/components/readrave/sidebar'
import { sidebarConfig } from './sidebar'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="mx-auto max-w-screen-xl px-5 pb-20 mt-14 md:grid md:grid-cols-[200px_minmax(0,1fr)] md:gap-6 lg:grid-cols-[240px_minmax(0,1fr)] lg:px-7">
      <ReadraveMobilebar sidebarConfig={sidebarConfig} />
      <ReadraveSidebar sidebarConfig={sidebarConfig} />
      <main className="pt-6">
        <article className="prose max-w-none dark:prose-invert">
          {children}
        </article>
      </main>
    </div>
  )
}
`

export const DEMO_SIDEBAR = `'use client'

import { ScrollArea } from '@/components/ui/scroll-area'
import { cn } from '@/lib/utils'
import Link from 'next/link'
import { usePathname } from 'next/navigation'

export const ReadraveSidebar = ({
  sidebarConfig,
}: {
  sidebarConfig: { title: string; href?: string; css?: any }[]
}) => {
  const pathname = usePathname()

  return (
    <aside className="z-10 top-14 hidden h-[calc(100dvh-3.5rem)] md:sticky md:block">
      <ScrollArea className="h-full py-6">
        <nav className="flex flex-col space-y-2.5 text-sm text-foreground/50">
          {sidebarConfig.map((item, i) => (
            <span key={i}>
              {item.href ? (
                <Link
                  href={item.href}
                  className={cn(
                    'font-foreground/50 hover:text-primary hover:underline',
                    pathname === item.href && 'font-medium text-primary',
                  )}
                  style={item.css}
                >
                  {item.title}
                </Link>
              ) : (
                <p
                  className="font-semibold text-foreground/75 select-none"
                  style={item.css}
                >
                  {item.title}
                </p>
              )}
            </span>
          ))}
        </nav>
      </ScrollArea>
    </aside>
  )
}
`

export const DEMO_MOBILEBAR = `'use client'

import { ScrollArea } from '@/components/ui/scroll-area'
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet'
import { cn } from '@/lib/utils'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { useState } from 'react'

export const ReadraveMobilebar = ({
  sidebarConfig,
}: {
  sidebarConfig: { title: string; href?: string; css?: any }[]
}) => {
  const [open, setOpen] = useState(false)
  const pathname = usePathname()

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger className="md:hidden fixed top-20 bg-background text-foreground border p-2 px-4 rounded-md right-6 flex gap-x-2 items-center">
        <svg
          strokeWidth="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="h-5 w-5 rotate-180"
        >
          <path
            d="M3 5H11"
            stroke="currentColor"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          ></path>
          <path
            d="M3 12H16"
            stroke="currentColor"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          ></path>
          <path
            d="M3 19H21"
            stroke="currentColor"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          ></path>
        </svg>
        <span className="sr-only">Toggle Menu</span>
      </SheetTrigger>
      <SheetContent className="md:hidden w-72">
        <ScrollArea className="h-full">
          <nav className="flex flex-col space-y-2.5 text-sm text-foreground/50">
            {sidebarConfig.map((item, i) => (
              <span key={i}>
                {item.href ? (
                  <Link
                    href={item.href}
                    className={cn(
                      'font-foreground/50 hover:text-primary hover:underline',
                      pathname === item.href && 'font-medium text-primary',
                    )}
                    style={item.css}
                    onClick={() => setOpen(false)}
                  >
                    {item.title}
                  </Link>
                ) : (
                  <p
                    className="font-semibold text-foreground/75 select-none"
                    style={item.css}
                  >
                    {item.title}
                  </p>
                )}
              </span>
            ))}
          </nav>
        </ScrollArea>
      </SheetContent>
    </Sheet>
  )
}
`
